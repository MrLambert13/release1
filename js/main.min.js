"use strict";

(function ($) {
  $('document').ready(function () {
    //TODO close menu account on overout
    //check is user authorized
    checkCoockieForUserName();
    //Load all goods from db.json/goods
    loadGoods();
    //Load cart from db.json/cart to mini cart
    buildMiniCart();
    //Add event on btn 'Add to cart'
    $('#goods').on('click', '.item__card-link', function (event) {
      // console.log(event.target.dataset.id);
      addToCart(event.target);
      event.preventDefault();
    });

    //Add event on btn remove good
    $('#cart, #bigCart').on('click', '.action__del', function (event) {
      removeFromCart(event.currentTarget);
      event.preventDefault();
    });

    //Add event on input quantity changed
    $('#bigCart').on('change', '.quantity__input', function (event) {
      changeInCart(event.target);
    });
    
    //Add event in clear cart click
    $('#clearCart').click(function () {
      var cartObj = $('#bigCart .quantity__input');
      for (var key in cartObj) {
        if (!isNaN(key)) {
          removeFromCart(cartObj[key]);
        }
      }
    });

  });
})(jQuery);

/**
 * load goods from db.json/goods
 */
function loadGoods() {
  $.getJSON('http://localhost:3000/goods', function (data) {
    data.forEach(function (elem) {
      //card of good
      var $a = $('<a />');
      $a.attr('href', 'product.html').addClass('item__linktoproduct')
        .append($('<img />').attr({
          src: elem.image,
          alt: elem.name,
          class: 'item__img'
        }))
        .append($('<h6 />').addClass('item__name').text(elem.name))
        .append($('<p />').addClass('item__price').text('$ ' + elem.price.toFixed(2)));
      //button add to cart
      var $buyLinkBlock = $('<div />');
      $buyLinkBlock.addClass('item__card')
        .append($('<a />').attr({
            href: '#',
            class: 'item__card-link',
            'data-id': elem.id,
            'data-name': elem.name,
            'data-price': elem.price,
            'data-srcImg': elem.image,
            'data-color': elem.color,
            'data-size': elem.size,
            'data-shipping': elem.shipping
          })
            .text('Add to cart')
        );
      //main div for item
      var $itemDiv = $('<div />');
      $itemDiv.addClass('item')
        .append($a).append($buyLinkBlock);
      //add all in main section
      $('#goods').append($itemDiv);
    });
  });
}
"use strict";

/**
 * Build Main cart page with input, remove function
 */
function buildBigCart() {
  var checkUrl = /cart.html/;
  var currentUrl = document.location.href;
  //if this opened
  if (checkUrl.test(currentUrl)) {
    var $cartBig = $('#bigCart');
    $cartBig.empty();
    var subtotal = 0;
    var $subtotal = $('#subtotal');
    var $grandtotal = $('#grandtotal');
    var promo = false;
    $.ajax({
      url: 'http://localhost:3000/cart',
      dataType: 'json',
      success: function (cart) {
        if (cart.length === 0) {
          $cartBig.text('YOUR CART IS EMPTY');
          buildNumber(cart.length);
        } else {
          cart.forEach(function (item) {
            //column 1 - PRODUCT
            var $divRowItem = $('<div />', {class: 'row flex'});
            var $divDetail = $('<div />', {class: 'detail flex-aic liStyle-none'});
            var $scaleImgDiv = $('<div />', {class: 'img-scale'});
            var $imageGood = $('<a />', {href: '#'});
            $imageGood.append(
              $('<img />', {
                src: item.image,
                alt: item.name
              })
            );
            $scaleImgDiv.append($imageGood);
            $divDetail.append($scaleImgDiv);
            $divRowItem.append($divDetail);
            $cartBig.append($divRowItem);

            //column 2 - DETAIL
            var $nameLinkToGood = $('<a />', {href: '#'});
            $nameLinkToGood.append((
              $('<h3 />', {class: 'detail__prodName'}).text(item.name)
            ));
            var $color = $('<p />', {class: 'detail__prodChar'}).text('Color:');
            $color.append($('<span />', {class: 'detail__prodChar-gray'}).text(item.color));
            var $size = $('<p />', {class: 'detail__prodChar'}).text('Size:');
            $size.append($('<span />', {class: 'detail__prodChar-gray'}).text(item.size));
            $divDetail.append($('<div />', {class: 'description'}).append($nameLinkToGood, $color, $size));
            $divRowItem.append($divDetail);

            //column 3 - Unite price
            var $divPrice = $('<div />', {class: 'cardPrice'});
            $divPrice.append($('<p />', {class: 'cardPrice__text'}).text('$' + (+item.price).toFixed(2)));
            $divRowItem.append($divPrice);

            //column 4 - QUANTITY
            var $divQuantity = $('<div />', {class: 'quantity flex-aic'});
            var $inputQuantity = $('<input />');
            $inputQuantity.attr({
              class: 'quantity__input',
              type: 'number',
              value: item.quantity,
              'data-id': item.id,
              min: '1',
              max: '10'
            });
            $divQuantity.append($inputQuantity);
            $divRowItem.append($divQuantity);

            //column 5 - shipping
            var $divShip = $('<div />', {class: 'ship'});
            $divShip.append(
              $('<p />', {class: 'ship__text'}).text(item.shipping)
            );
            $divRowItem.append($divShip);

            //column 6 - SUBTOTAL
            subtotal += item.quantity * item.price;
            var $divSubtotal = $('<div />', {class: 'subtotal'});
            $divSubtotal.append(
              $('<p />', {class: 'cardPrice__text'}).text('$' + (item.quantity * item.price).toFixed(2))
            );
            $divRowItem.append($divSubtotal);


            //column 7 - REMOVE btn
            var $divRemove = $('<div />', {class: 'action'});
            $divRemove.append(
              $('<a />', {
                href: "#",
                class: 'action__del',
                'data-id': item.id
              }).append($('<i />', {class: 'fas fa-times-circle'}))
            );
            $divRowItem.append($divRemove);

            //total price
            $subtotal.text('Sub total: $' + subtotal.toFixed(2));
            if (!promo) {
              $grandtotal.text('$' + subtotal.toFixed(2));
            }
          });
        }
      }
    });
  }
}

/**
 * Function add small number of goods on top cart in header
 * and remove it if count < 0
 * @param count {number} count added goods
 */
function buildNumber(count) {
  if (count > 0) {
    var $cartImg = $('.cart-hov');
    $('.cart__number').remove();
    $cartImg.append(
      $('<div />', {class: 'cart__number'}).text(count)
    );
  } else {
    $('.cart__number').remove();
  }
}

/**
 * Build cart and add selected goods
 */
function buildMiniCart() {
  var $cart = $('#cart');
  $cart.empty();
  var totalPrice = 0;
  var totalCount = 0;
  $.ajax({
    url: 'http://localhost:3000/cart',
    dataType: 'json',
    success: function (cart) {
      if (cart.length === 0) {
        $cart.text('YOUR CART IS EMPTY');
        buildNumber(cart.length);
      } else {
        cart.forEach(function (item) {
          //build goods in cart
          $cart.append(
            $('<div />')
              .addClass('menuCart__row flex-jcsb-aic')
              .append(
                $('<div />')
                  .addClass('menuCart__row_col1')
                  .append(
                    $('<a />')
                      .attr({
                        href: '#',
                        'data-quantity': item.quantity,
                        'data-id': item.id
                      })
                      .append(
                        $('<img />').attr({
                          src: item.image,
                          alt: item.name,
                          style: 'height: 85px'
                        })
                      )
                  ),
                //add name in col2 cart
                $('<div />')
                  .addClass('menuCart__row_col2 col2')
                  .append(
                    $('<a />')
                      .attr({
                        class: 'col2__name',
                        href: '#'
                      })
                      .text(item.name),
                    //TODO add stars
                    $('<img />').attr({
                      class: 'col2__star block',
                      src: 'img/stars.png',
                      alt: 'stars'
                    }),
                    //count and price
                    $('<span />')
                      .addClass('col2__price')
                      .text(item.quantity + ' x $ ' + (+item.price).toFixed(2))
                  ),
                //col 3 with btn remove
                $('<div />')
                  .addClass('menuCart__row_col3')
                  .append(
                    $('<a />')
                      .attr({
                        class: 'action__del',
                        href: '#',
                        'data-id': item.id
                      })
                      .append(
                        $('<i />').addClass('fas fa-times-circle')
                      )
                  )
              )
          );
          totalCount += +item.quantity;
          totalPrice += item.quantity * item.price;
        });
        $cart.append(
          $('<div />')
            .addClass('menuCart__total flex-jcsb')
            .append(
              $('<span />').addClass('menuCart__total_text').text('TOTAL'),
              $('<span />').addClass('menuCart__total_text').text('$' + totalPrice.toFixed(2))
            )
        );
        buildNumber(totalCount);
      }
    }
  });
  // add button
  $cart.append(
    $('<a />', {
      class: 'menuCart__btn menuCart__btn_check',
      href: 'checkout.html',
    }).text('chekout'),
    $('<a />', {
      class: 'menuCart__btn menuCart__btn_cart',
      href: 'cart.html',
    }).text('go to cart')
  )
  //Load cart from db.json/cart to big cart
  buildBigCart();
}

/**
 * Add to cart good
 * @param target {HTMLElement} - clicked element in DOM
 */
function addToCart(target) {
  //get id
  var id = target.dataset.id;
  //check cart for this ID
  var entity = $('#cart [data-id="' + target.dataset.id + '"]');
  if (entity.length) {
    //selected good already in the cart
    $.ajax({
      url: 'http://localhost:3000/cart/' + id,
      type: 'PATCH',
      headers: {
        'content-type': 'application/json',
      },
      data: JSON.stringify({
        quantity: +$(entity)[0].dataset.quantity + 1,
      }),
      success: function () {
        // rebuld cart
        buildMiniCart();
      }
    })
  } else {
    //it is first good
    $.ajax({
      url: 'http://localhost:3000/cart',
      type: 'POST',
      headers: {
        'content-type': 'application/json',
      },
      data: JSON.stringify({
        id: id,
        quantity: 1,
        name: target.dataset.name,
        price: target.dataset.price,
        image: target.dataset.srcimg,
        color: target.dataset.color,
        size: target.dataset.size,
        shipping: target.dataset.shipping
      }),
      success: function () {
        // rebuld cart
        buildMiniCart();
      }
    })
  }
}

/**
 *
 * @param target {HTMLElement} - changed input element in DOM
 */
function changeInCart(target) {
  //get id
  var id = target.dataset.id;
  //count of good must be in 1-10
  target.value = (target.value < 1) ? 1 : target.value;
  target.value = (target.value > 10) ? 10 : target.value;
  $.ajax({
    url: 'http://localhost:3000/cart/' + id,
    type: 'PATCH',
    headers: {
      'content-type': 'application/json',
    },
    data: JSON.stringify({
      quantity: target.value,
    }),
    success: function () {
      // rebuld cart
      buildMiniCart();
    }
  })

}

//remove good from cart
function removeFromCart(target) {
  //get id
  var id = target.dataset.id;
  $.ajax({
    url: 'http://localhost:3000/cart/' + id,
    type: 'DELETE',
    success: function () {
      // rebuld cart
      buildMiniCart();
    }
  })
}
"use strict";

/**
 * Close menu for account's action
 */
function closeMenuAccount() {
  $('.authorization').mouseleave(function () {
    this.remove();
  });
}

/**+
 * show authorization menu or hide it
 */
function buildAuthorizationForm() {
  if ($('div.authorization').length !== 0) {
    $('div.authorization').remove();
  } else {
    var $divAuthorization = $('<div />', {class: 'authorization'});
    $divAuthorization.append(
      $('<h3 />', {class: 'authorization__header'}).text('Sign in'),
      $('<p />', {class: 'authorization__text'}).text('Login'),
      $('<input />', {
        type: 'text',
        placeholder: 'Your login',
        id: 'login',
        class: 'authorization__input'
      }),
      $('<p />', {class: 'authorization__text'}).text('Password'),
      $('<input />', {
        type: 'password',
        placeholder: 'Your password',
        id: 'password',
        class: 'authorization__input'
      }),
      $('<div />', {class: 'authorization__btn_block'}).append(
        $('<a />', {
          class: 'authorization__btn',
          href: '#',
          text: 'Log in'
        }),
        $('<a />', {
          class: 'authorization__btn',
          href: '#',
          text: 'Cancel'
        })
      ),
      $('<div />', {class: 'authorization__btn_block'}).append(
        $('<a />', {
          class: 'authorization__hint',
          text: 'Forgot password?',
          href: '#'
        }),
        $('<a />', {
          class: 'authorization__hint',
          text: 'New user?',
          href: '#',
          id: 'createUser'
        })
      )
    );
    $('.header__flex-right').append($divAuthorization);

    //button cancel
    $('.authorization__btn:last').click(function (event) {
      $('div.authorization').remove();
      event.preventDefault();
    });
    //button login
    $('.authorization__btn:first').click(function (event) {
      checkInputs();
      event.preventDefault();
    });
    //new user click
    $('#createUser').click(function (event) {
      buildMenuregistration();
      event.preventDefault();
    });
    closeMenuAccount();
  }
}

/**
 * Check inputs, for registration
 */
function checkInputs() {
  $('.warning').remove();
  var log = $('#login').val();
  var pass = $('#password').val();

  if (log && pass) {
    getUserFromDB(function (users) {
      var userFind = false;
      users.forEach(function (oneUser) {
        if (oneUser.login === log && oneUser.pass === pass) {
          userFind = true;
          //set cookie for user login, pass ann ID
          setCookie('userId', oneUser.id);
          setCookie('userLogin', oneUser.login);
          setCookie('userPassword', oneUser.pass);
          setCookie('userGroup', oneUser.policy);
          checkCoockieForUserName();
        }
      });
      if (!userFind) {
        addWarning('Login/password incorrect')
      }
    });
  } else {
    addWarning('Please, input log and pass');
  }
}

/**
 * Registration for new users
 * @param userLogin {string} - login
 * @param userPassword - password
 */
function addToUsersDB(userLogin, userPassword) {
  var currentCart = null;
  getCurrentCart(function (cart) {
    currentCart = cart;
    console.log(currentCart);
  });
  console.log(currentCart);
  // TODO something :D
  /*$.ajax({
    url: 'http://localhost:3000/users',
    type: 'POST',
    headers: {
      'content-type': 'application/json'
    },
    data: JSON.stringify({
      login: userLogin,
      pass: userPassword,
      policy: 'users',
    }),
  })*/
}

/**
 * Add warning message in login window
 * @param text {string} - warning text for show
 */
function addWarning(text) {
  $('div.authorization').append(
    $('<p />', {class: 'warning'}).text(text)
  );
}

/**
 * Get login from DB and give to callback it
 * @param callback {function} - function where do some action with login
 */
function getUserFromDB(callback) {
  $.ajax({
    url: 'http://localhost:3000/users',
    dataType: 'json',
    success: function (users) {
      callback(users);
    }
  });
}

/**
 * Get current cart, when user registration (else cart is be lost)
 * @param callback {function} - for work with cart
 */
function getCurrentCart(callback) {
  $.ajax({
    url: 'http://localhost:3000/cart',
    dataType: 'json',
    success: function (data) {
      callback(data);
    }
  });
}

/**
 * Check if user already authorized
 */
function checkCoockieForUserName() {
  var $accountButton = $('.headerRight__account');
  $accountButton.unbind('click');
  //close Sign in window
  $('.authorization').remove();
  if (!getCookie('userLogin')) {
    //set account text standart
    $accountButton.text('My Account ').append($('<i />', {class: 'fas fa-caret-down'}));
    //add event for authorization
    $accountButton.click(function (event) {
      buildAuthorizationForm();
      event.preventDefault();
    });
  } else {
    $accountButton.text('Hello, ' + getCookie('userLogin'));
    $accountButton.click(function (event) {
      buildMenuUser();
      event.preventDefault();
    });
  }
}

/**
 * Build menu for change profile and logout
 */
function buildMenuUser() {
  if ($('div.authorization').length !== 0) {
    $('div.authorization').remove();
  } else {
    var $divUserMenu = $('<div />', {class: 'authorization'});
    $divUserMenu.append(
      $('<div />', {class: 'flex-jcsb'}).append(
        //left column with name of properties
        $('<div />', {class: 'divNameOfProp'}).append(
          $('<p />', {class: 'propName'}).text('Name:'),
          $('<p />', {class: 'propName'}).text('Password:'),
          $('<p />', {class: 'propName'}).text('E-mail:'),
          $('<p />', {class: 'propName'}).text('Gender:'),
          $('<p />', {class: 'propName'}).text('Credit card:'),
          $('<p />', {class: 'propName'}).text('About:')
        ),
        //right column with value of properties
        $('<div />', {class: 'divValueOfProp'}).append(
          $('<p />', {class: 'propValue', id: 'log'}),
          $('<p />', {class: 'propValue', id: 'pass'}),
          $('<p />', {class: 'propValue', id: 'email'}),
          $('<p />', {class: 'propValue', id: 'gender'}),
          $('<p />', {class: 'propValue', id: 'creditCard'}),
          $('<p />', {class: 'propValue', id: 'bio'})
        )
      ),
      $('<div />', {class: 'flex-jcsa'}).append(
        $('<a />', {class: 'authorization__btn', id: 'multiBtnLeft'}).text('Exit'),
        $('<a />', {class: 'authorization__btn', id: 'multiBtnRight'}).text('Change')
      )
    );

    //fill value
    var log = getCookie('userLogin');
    var pass = getCookie('userPassword');
    getUserFromDB(function (users) {
      users.forEach(function (thisUser) {
        if (thisUser.login === log && thisUser.pass === pass) {
          $('#log').text(thisUser.login);
          $('#pass').text(thisUser.pass);
          $('#email').text(thisUser.email);
          $('#gender').text(thisUser.gender);
          $('#creditCard').text(thisUser.creditCard);
          $('#bio').text(thisUser.bio);
        }
      });
    });

    //add main div in DOM
    $('.header__flex-right').append($divUserMenu);

    //feedback button for admin
    if (getCookie('userGroup') === 'admins') {
      $('#multiBtnLeft').after(
        $('<a />', {class: 'authorization__btn', id: 'btnFeedback', href: 'feedback.html'})
          .text('Fb')
      );
    }

    //click exit
    if ($('#multiBtnLeft').text() === 'Exit') {
      $('#multiBtnLeft').click(function (event) {
        //do logout
        deleteCookie('userId');
        deleteCookie('userLogin');
        deleteCookie('userPassword');
        deleteCookie('userGroup');
        checkCoockieForUserName();
      });
    }
    //click change
    if ($('#multiBtnRight').text() === 'Change') {
      $('#multiBtnRight').click(function () {
        var $divValue = $('.divValueOfProp');
        //do change profile
        // convertTextToInput('#log');
        for (var key in $divValue.children()) {
          convertTextToInput('#' + $divValue.children()[key].id);
        }
        //delete eventlistener
        //change button to save and cancel
        changeMultiButton();
      });
    }
    closeMenuAccount();
  }
}

/**
 * Build menu for change profile and logout
 */
function buildMenuregistration() {
  $('div.authorization').remove();
  var $divUserMenu = $('<div />', {class: 'authorization'});
  $divUserMenu.append(
    $('<div />', {class: 'flex-jcsb'}).append(
      //left column with name of properties
      $('<div />', {class: 'divNameOfProp'}).append(
        $('<p />', {class: 'propName'}).text('Name:'),
        $('<p />', {class: 'propName'}).text('Password:'),
        $('<p />', {class: 'propName'}).text('E-mail:'),
        $('<p />', {class: 'propName'}).text('Gender:'),
        $('<p />', {class: 'propName'}).text('Credit card:'),
        $('<p />', {class: 'propName'}).text('About:')
      ),
      //right column with value of properties
      $('<div />', {class: 'divValueOfProp'}).append(
        $('<input />', {class: 'propValue', id: 'log'}),
        $('<input />', {class: 'propValue', id: 'pass'}),
        $('<input />', {class: 'propValue', id: 'email'}),
        $('<input />', {class: 'propValue', id: 'gender'}),
        $('<input />', {class: 'propValue', id: 'creditCard'}),
        $('<input />', {class: 'propValue', id: 'bio'})
      )
    ),
    $('<div />', {class: 'flex-jcsa'}).append(
      $('<a />', {class: 'authorization__btn', id: 'multiBtnLeft'}).text('Exit'),
      $('<a />', {class: 'authorization__btn', id: 'multiBtnRight'}).text('Create')
    )
  );
  //add main div in DOM
  $('.header__flex-right').append($divUserMenu);
  //click exit
  if ($('#multiBtnLeft').text() === 'Exit') {
    $('#multiBtnLeft').click(function (event) {
      $('div.authorization').remove();
    });
  }
  //click save
  if ($('#multiBtnRight').text() === 'Create') {
    $('#multiBtnRight').click(function () {
      $.ajax({
        url: 'http://localhost:3000/users',
        type: 'POST',
        headers: {
          'content-type': 'application/json',
        },
        data: JSON.stringify({
          login: $('#log').val(),
          pass: $('#pass').val(),
          email: $('#email').val(),
          gender: $('#gender').val(),
          creditCard: $('#creditCard').val(),
          bio: $('#bio').val(),
          cart: []
        }),
        success: function (data) {
          setCookie('userId', data.id);
          setCookie('userLogin', data.login);
          setCookie('userPassword', data.pass);
          setCookie('userGroup', data.policy);
          $('div.authorization').remove();
          checkCoockieForUserName();
        }
      });
    });
  }
  closeMenuAccount();
}

/**
 * change button when user want to change self profile
 */
function changeMultiButton() {
  var $right = $('#multiBtnRight');
  var $left = $('#multiBtnLeft');

  $right.unbind();
  $right.text('Cancel');


  $left.unbind();
  $left.text('Save');
  $left.addClass('btn_save');

  //click on cancel button
  $right.click(function () {
    $('div.authorization').remove();
  });
  //click on save button
  $left.click(function () {
    //save change, change cookie, check cookie
    var id = getCookie('userId');
    $.ajax({
      url: 'http://localhost:3000/users/' + id,
      type: 'PATCH',
      headers: {
        'content-type': 'application/json',
      },
      data: JSON.stringify({
        login: $('#log').val(),
        pass: $('#pass').val(),
        email: $('#email').val(),
        gender: $('#gender').val(),
        creditCard: $('#creditCard').val(),
        bio: $('#bio').val()
      }),
      success: function () {
        deleteCookie('userLogin');
        deleteCookie('userPassword');
        setCookie('userLogin', $('#log').val());
        setCookie('userPassword', $('#pass').val());
        $('div.authorization').remove();
        checkCoockieForUserName();
      }
    });
  });
}

/**
 * change p to input
 * @param idText {string} - id of element
 */
function convertTextToInput(idText) {
  var currentVal = $(idText).text();
  //replace text on input
  var $newInput = $('<input />', {id: idText.slice(1), value: currentVal});
  $(idText).replaceWith($newInput);
}

/**
 * Search in cookie user login
 * @param name {string} - User login for search
 * @return {any} - undefined if not found name user, or return it's name
 */
function getCookie(name) {
  var matches = document.cookie.match(new RegExp(
    "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
  ));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}

/**
 * Save data in cookies
 * @param name {string} - name for data save
 * @param value {string} - value this data
 * @param options {object} - advanced option for cookie
 */
function setCookie(name, value, options) {
  options = options || {};
  var expires = options.expires;

  if (typeof expires === "number" && expires) {
    var d = new Date();
    d.setTime(d.getTime() + expires * 1000);
    expires = options.expires = d;
  }
  if (expires && expires.toUTCString) {
    options.expires = expires.toUTCString();
  }
  //secure value
  value = encodeURIComponent(value);

  var updatedCookie = name + "=" + value;

  for (var propName in options) {
    updatedCookie += "; " + propName;
    var propValue = options[propName];
    if (propValue !== true) {
      updatedCookie += "=" + propValue;
    }
  }
  document.cookie = updatedCookie;
}

/**
 * Function for delete cookie with "name", over change date
 * @param name {string} - name of cookie
 */
function deleteCookie(name) {
  setCookie(name, "", {
    expires: -1
  })
}